#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('wechaty-robot-lite:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create socket.io server.
 */

// const io = require("socket.io")(server);
// io.on("connection", socket => {  // 客户端链接成功
//
//     socket.on("send", data => {  // 监听的频道必须和客户端监听的频道相同，等待消息
//         // io.emit("监听频道", "发送的信息");  // 向所有客户端发送信息
//         console.log('客户端发送的内容：', data);
//         socket.emit('getMsg', '我是返回的消息... ...');
//     });
//
//     socket.on("disconnect", data => {  // 客户端断开链接
//         console.log('断开连接：', data);
//     });
//
//     setTimeout( () => {
//         socket.emit('getMsg', '我是初始化3s后的返回消息... ...');
//     }, 3000)
//
// });

var io = require('../socketio');
io.getSocketio(server);


/**
 * Create puppet_donut server.
 */

var puppet_donut = require('../donut');
puppet_donut.run();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
